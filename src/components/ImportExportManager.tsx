import { useState, useRef } from 'react';
import type { CommentCategory, CommentTemplate, CodeComment, Repository } from '../types';
import { Button, Section, InfoCard } from './ui';
import { exportData, importData, downloadFile, readFile } from '../utils/importExport';

interface ImportExportManagerProps {
  categories: CommentCategory[];
  templates: CommentTemplate[];
  comments: CodeComment[];
  repository: Repository | null;
  onImportCategories: (categories: CommentCategory[]) => void;
  onImportTemplates: (templates: CommentTemplate[]) => void;
  onImportComments?: (comments: CodeComment[]) => void;
  onImportRepository?: (repository: Repository) => void;
}

export const ImportExportManager = ({
  categories,
  templates,
  comments,
  repository,
  onImportCategories,
  onImportTemplates,
  onImportComments,
  onImportRepository
}: ImportExportManagerProps) => {
  const [isImporting, setIsImporting] = useState(false);
  const [importError, setImportError] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const handleExportAll = () => {
    const data = exportData({
      categories,
      templates,
      comments,
      repository: repository || undefined
    });
    
    const filename = `code-review-export-${new Date().toISOString().split('T')[0]}.json`;
    downloadFile(data, filename);
  };

  // –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —à–∞–±–ª–æ–Ω–æ–≤
  const handleExportSettings = () => {
    const data = exportData({
      categories,
      templates
    });
    
    const filename = `code-review-settings-${new Date().toISOString().split('T')[0]}.json`;
    downloadFile(data, filename);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞
  const handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsImporting(true);
    setImportError(null);

    try {
      const content = await readFile(file);
      const importedData = importData(content);

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (importedData.categories.length > 0) {
        onImportCategories(importedData.categories);
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
      if (importedData.templates.length > 0) {
        onImportTemplates(importedData.templates);
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞)
      if (importedData.comments && importedData.comments.length > 0 && onImportComments) {
        onImportComments(importedData.comments);
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞)
      if (importedData.repository && onImportRepository) {
        onImportRepository(importedData.repository);
      }

      // –û—á–∏—â–∞–µ–º input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }

      alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
    } catch (error) {
      setImportError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setIsImporting(false);
    }
  };

  return (
    <div>
      <Section title="–ò–º–ø–æ—Ä—Ç –∏ —ç–∫—Å–ø–æ—Ä—Ç" icon="üìÅ">
        {/* –≠–∫—Å–ø–æ—Ä—Ç */}
        <div style={{ marginBottom: '20px' }}>
          <h4 style={{ 
            margin: '0 0 12px 0', 
            fontSize: '14px', 
            fontWeight: '600',
            color: 'var(--gitlab-text-primary)'
          }}>
            –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
          </h4>
          
          <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
            <Button
              variant="blue"
              size="sm"
              onClick={handleExportAll}
              disabled={isImporting}
            >
              üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            </Button>
            
            <Button
              variant="secondary"
              size="sm"
              onClick={handleExportSettings}
              disabled={isImporting}
            >
              ‚öôÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
            </Button>
          </div>
          
          <div style={{ 
            fontSize: '12px', 
            color: 'var(--gitlab-text-secondary)',
            marginTop: '8px'
          }}>
            <div>‚Ä¢ <strong>–í—Å–µ –¥–∞–Ω–Ω—ã–µ:</strong> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —à–∞–±–ª–æ–Ω—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</div>
            <div>‚Ä¢ <strong>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</strong> —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —à–∞–±–ª–æ–Ω—ã</div>
          </div>
        </div>

        {/* –ò–º–ø–æ—Ä—Ç */}
        <div>
          <h4 style={{ 
            margin: '0 0 12px 0', 
            fontSize: '14px', 
            fontWeight: '600',
            color: 'var(--gitlab-text-primary)'
          }}>
            –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
          </h4>
          
          <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
            <input
              ref={fileInputRef}
              type="file"
              accept=".json"
              onChange={handleImport}
              style={{ display: 'none' }}
            />
            
            <Button
              variant="success"
              size="sm"
              onClick={() => fileInputRef.current?.click()}
              disabled={isImporting}
            >
              {isImporting ? '‚è≥ –ò–º–ø–æ—Ä—Ç...' : 'üì• –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞'}
            </Button>
          </div>

          {importError && (
            <InfoCard type="danger" style={{ marginTop: '8px' }}>
              ‚ùå {importError}
            </InfoCard>
          )}

          <div style={{ 
            fontSize: '12px', 
            color: 'var(--gitlab-text-secondary)',
            marginTop: '8px'
          }}>
            <div>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON</div>
            <div>‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º</div>
            <div>‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —à–∞–±–ª–æ–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ ID –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã</div>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div style={{ 
          marginTop: '20px',
          padding: '12px',
          backgroundColor: 'var(--gitlab-bg-tertiary)',
          borderRadius: '6px',
          border: '1px solid var(--gitlab-border-light)'
        }}>
          <h4 style={{ 
            margin: '0 0 8px 0', 
            fontSize: '13px', 
            fontWeight: '600',
            color: 'var(--gitlab-text-primary)'
          }}>
            –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
          </h4>
          
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: '1fr 1fr', 
            gap: '8px',
            fontSize: '12px',
            color: 'var(--gitlab-text-secondary)'
          }}>
            <div>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories.length}</div>
            <div>üìã –®–∞–±–ª–æ–Ω—ã: {templates.length}</div>
            <div>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments.length}</div>
            <div>üèóÔ∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repository ? '‚úì' : '‚úó'}</div>
          </div>
        </div>
      </Section>
    </div>
  );
};

