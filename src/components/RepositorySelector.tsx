import { useState, useEffect } from 'react';
import type { Repository, WindowWithFileSystemAPI } from '../types';
import { Button, Input, Section, SettingItem, FormActions, Badge } from './ui';

interface RepositorySelectorProps {
  repository: Repository | null;
  onRepositorySelect: () => void;
  onRepositoryUrlSet: (baseUrl: string, defaultBranch: string) => void;
  isLoading: boolean;
  onClose?: () => void; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  allFilesCount?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  isSettingsModal?: boolean; // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
  pendingUrl?: {baseUrl: string; defaultBranch: string} | null; // URL –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
}

export const RepositorySelector = ({ 
  repository, 
  onRepositorySelect, 
  onRepositoryUrlSet,
  isLoading,
  onClose,
  allFilesCount = 0,
  isSettingsModal = false,
  pendingUrl
}: RepositorySelectorProps) => {
  const [showUrlForm, setShowUrlForm] = useState(false);
  const [baseUrl, setBaseUrl] = useState('');
  const [defaultBranch, setDefaultBranch] = useState('main');
  const [urlSaved, setUrlSaved] = useState(!!repository?.baseUrl || !!pendingUrl); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, —á—Ç–æ URL –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω

  const handleSubmitUrl = (e: React.FormEvent) => {
    e.preventDefault();
    if (baseUrl.trim()) {
      onRepositoryUrlSet(baseUrl.trim(), defaultBranch.trim());
      setShowUrlForm(false);
      setUrlSaved(true); // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ URL –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    }
  };

  const handleRepositorySelect = () => {
    onRepositorySelect();
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    if (repository && !isLoading && allFilesCount > 0 && onClose && !isSettingsModal) {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      onClose();
    }
  }, [repository, isLoading, allFilesCount, onClose, isSettingsModal]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (repository?.baseUrl) {
      setBaseUrl(repository.baseUrl);
      setUrlSaved(true);
    } else if (pendingUrl?.baseUrl) {
      setBaseUrl(pendingUrl.baseUrl);
      setUrlSaved(true);
    }
    
    if (repository?.defaultBranch) {
      setDefaultBranch(repository.defaultBranch);
    } else if (pendingUrl?.defaultBranch) {
      setDefaultBranch(pendingUrl.defaultBranch);
    }
  }, [repository?.baseUrl, repository?.defaultBranch, pendingUrl?.baseUrl, pendingUrl?.defaultBranch]); // –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –û–±–Ω–æ–≤–ª—è–µ–º baseUrl –∏ defaultBranch –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ repository –∏–ª–∏ pendingUrl
  useEffect(() => {
    if (repository?.baseUrl) {
      setBaseUrl(repository.baseUrl);
      setUrlSaved(true);
    } else if (pendingUrl?.baseUrl) {
      setBaseUrl(pendingUrl.baseUrl);
      setUrlSaved(true);
    } else {
      setUrlSaved(false);
    }
    
    if (repository?.defaultBranch) {
      setDefaultBranch(repository.defaultBranch);
    } else if (pendingUrl?.defaultBranch) {
      setDefaultBranch(pendingUrl.defaultBranch);
    }
  }, [repository, pendingUrl]);

  // –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è isConfigured

  return (
    <Section title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" icon="üìÅ">
      {/* URL Configuration - First Step */}
      <SettingItem
        title="URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        description="–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–æ–¥"
        icon="üîó"
      >
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "flex-end",
            gap: "8px",
          }}
        >
          {(repository?.baseUrl || pendingUrl?.baseUrl || baseUrl) && (
            <div style={{ 
              maxWidth: '180px', 
              overflow: 'hidden',
              textOverflow: 'ellipsis',
              whiteSpace: 'nowrap',
              fontSize: '11px'
            }}>
              <Badge variant="success" size="sm">
              ‚úÖ {(() => {
                const fullUrl = repository?.baseUrl || pendingUrl?.baseUrl || baseUrl;
                if (!fullUrl) return '';
                
                // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö URL
                const cleaned = fullUrl.replace(/^https?:\/\/(www\.)?/, '');
                if (cleaned.length <= 25) return cleaned;
                
                // –ë–µ—Ä–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü URL
                const start = cleaned.substring(0, 12);
                const end = cleaned.substring(cleaned.length - 8);
                return `${start}...${end}`;
              })()}
              </Badge>
            </div>
          )}
          
          <Button
            variant={repository?.baseUrl || pendingUrl?.baseUrl || baseUrl ? "success" : "blue"}
            size="sm"
            onClick={() => setShowUrlForm(!showUrlForm)}
            style={{ minWidth: "80px" }}
          >
                   {repository?.baseUrl || pendingUrl?.baseUrl || baseUrl ? "‚úèÔ∏è" : "üîó"}
          </Button>
        </div>
      </SettingItem>

      {/* Repository Selection - Second Step */}
      {(repository?.baseUrl || pendingUrl?.baseUrl || urlSaved) && (
        <SettingItem
          title="–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
          description="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–≤—å—é"
          icon="üìÇ"
        >
          <div
            style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "flex-end",
              gap: "8px",
            }}
          >
            {repository && (
              <Badge variant="success" size="sm">
                ‚úÖ {repository.name}
              </Badge>
            )}

            {/* Hidden input for fallback */}
            <input
              type="file"
              id="directory-picker"
              {...({ webkitdirectory: "" } as Record<string, string>)}
              multiple
              style={{ display: "none" }}
              onChange={(e) => {
                const files = Array.from(e.target.files || []);
                if (files.length > 0) {
                  (window as WindowWithFileSystemAPI).handleDirectoryFallback?.(
                    files
                  );
                }
              }}
            />

            <Button
              variant={repository ? "secondary" : "blue"}
              size="sm"
              onClick={handleRepositorySelect}
              disabled={isLoading}
              style={{ minWidth: "80px" }}
            >
                   {isLoading
                     ? "‚è≥"
                     : repository
                     ? "‚úèÔ∏è"
                     : "üìÅ"}
            </Button>
          </div>
        </SettingItem>
      )}

      {/* URL Form */}
      {showUrlForm && (
        <form onSubmit={handleSubmitUrl}>
          <Input
            label="URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
            type="url"
            value={baseUrl}
            onChange={(e) => setBaseUrl(e.target.value)}
            placeholder="https://gitlab.crja72.ru/django/2024/autumn/course/students/282461-mihasokolovilich-course-1187"
            required
          />

          <Input
            label="–û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ç–∫–∞"
            type="text"
            value={defaultBranch}
            onChange={(e) => setDefaultBranch(e.target.value)}
            placeholder="main"
            required
          />

                 <FormActions
                   onCancel={() => setShowUrlForm(false)}
                   onSubmit={() => handleSubmitUrl({ preventDefault: () => {} } as React.FormEvent)}
                   submitText="üíæ"
                   submitVariant="blue"
                   cancelText="‚ùå"
                 />
        </form>
      )}
    </Section>
  );
};
